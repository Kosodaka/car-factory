// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	dto "car-factory/app/dto"
	entity "car-factory/app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarCreator is a mock of CarCreator interface.
type MockCarCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCarCreatorMockRecorder
}

// MockCarCreatorMockRecorder is the mock recorder for MockCarCreator.
type MockCarCreatorMockRecorder struct {
	mock *MockCarCreator
}

// NewMockCarCreator creates a new mock instance.
func NewMockCarCreator(ctrl *gomock.Controller) *MockCarCreator {
	mock := &MockCarCreator{ctrl: ctrl}
	mock.recorder = &MockCarCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarCreator) EXPECT() *MockCarCreatorMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCarCreator) CreateCar(req entity.Car) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", req)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarCreatorMockRecorder) CreateCar(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCarCreator)(nil).CreateCar), req)
}

// GetCar mocks base method.
func (m *MockCarCreator) GetCar(brand string) ([]dto.CarDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", brand)
	ret0, _ := ret[0].([]dto.CarDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarCreatorMockRecorder) GetCar(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCarCreator)(nil).GetCar), brand)
}
